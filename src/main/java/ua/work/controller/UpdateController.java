package ua.work.controller;

import lombok.extern.log4j.Log4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.invoices.SendInvoice;
import org.telegram.telegrambots.meta.api.methods.send.SendAudio;
//import org.telegram.telegrambots.meta.api.methods.send.SendInvoice;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import ua.work.dao.UserDataRepository;
import ua.work.dao.UserLessonsRepository;
import ua.work.dao.entity.UserData;
import ua.work.dao.entity.UserLessons;
import ua.work.service.AudioService;

import java.io.File;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;


@Log4j
@Component
public class UpdateController {

    private TelegramBot telegramBot;

    private final AudioService audioService;
    private final UserDataRepository userDataRepository;
    private final UserLessonsRepository userLessonsRepository;



    public UpdateController(AudioService audioService, UserDataRepository userDataRepository,
                            UserLessonsRepository userLessonsRepository) {
        this.audioService = audioService;
        this.userDataRepository = userDataRepository;
        this.userLessonsRepository = userLessonsRepository;
    }

    public void registerBot(TelegramBot telegramBot) {
        this.telegramBot = telegramBot;
        botCommand();
    }
    static final String HELP_TEXT = "—ç—Ç–æ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é—â–∏–π –∞—É–¥–∏–æ –ª–µ–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å." +
            "\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä—è–º–æ —Å—é–¥–∞." +
            "\n\n–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, —É—Ä–æ–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏ —É—Å–ª—É–≥–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª—è–≤–∞–µ—Ç—Å—è." +
            "\n\n—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: " +
                "\n/all_files - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏" +
                "\n/get_lesson - –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ —Å—Ä–∞–∑—É" +
                "\n/change_status - —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞";

    static final String filePath = "C:\\Users\\hokage\\Downloads\\Telegram Desktop\\lessons_mp3\\lesson1.mp3";
    static final String folderPath2 = "C:\\Users\\hokage\\Downloads\\Telegram Desktop\\lessons_mp3";
    static final String folderPath = "/opt/files/lesson_ogg";

    static final String congrats = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –í–∞—Å! \n\n–ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞!" +
            "\n\n–í–æ—Ç –í–∞—à –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫. \n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é –∑–Ω–∞–Ω–∏–π!" +
            "\n\n–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π \uD83D\uDCDA–º–æ–∏ —É—Ä–æ–∫–∏\uD83D\uDCDA" +
            "\n\n–ñ–µ–ª–∞—é —É–¥–∞—á–∏!‚ò∫";
    static final String comeback = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏!" +
            "\n\n–í—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –Ω–µ –ø—Ä–µ—Å—Ç–∞–µ—Ç–µ —É—á–∏—Ç—å—Å—è –∏ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è!" +
            "\n\n–î–∞–ª—å—à–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ\uD83D\uDE01‚ú®";
    public void botCommand() {
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"));
        listOfCommands.add(new BotCommand("/help", "–ø–æ–º–æ—â—å")); //–ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–∏–ø—É : –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å. —Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å. –±—É–¥—É –ª–∏ —è —É—Å–ø–µ–≤–∞—Ç—å.
        listOfCommands.add(new BotCommand("/question", "–≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"));//–≤–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏–ª–∏ –≥–¥–µ —á–µ–ª –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ

        telegramBot.executeBotCommand(listOfCommands);
    }

    public void processUpdate(Update update) {
        //—ç—Ç–æ –º–µ—Ç–æ–¥ —Ç–≥ –±–æ—Ç–∞ onUpdateReceived
        //–æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞  –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –≤ –±–æ—Ç–µ

        if(update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            log.info(update.getMessage().getText());


            switch (messageText) {
                case "/start":
                case "/menu":
                    userState(update.getMessage());
                    sendsMessage(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:");  // —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —á—É–≤–∞–∫ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
                    greetings(chatId, "–ü—Ä–æ—à—É, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞\uD83D\uDE0A");
                    break;

                case "/help":
                    prepareAndSendMessage(chatId, HELP_TEXT);
                    break;

                case "\uD83C\uDF81–º–µ–Ω—é\uD83C\uDF81":
                    userState(update.getMessage());
                    greetings(chatId, "–ü—Ä–æ—à—É, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞\uD83D\uDE0A");
                    break;

                case "üìö–º–æ–∏ —É—Ä–æ–∫–∏üìö":
                case "/lectures":
                    alreadyHavingSubscriptionWindow(chatId, "–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º —É—Ä–æ–∫–∏?");
                    break;

                case "\uD83D\uDC8E–º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\uD83D\uDC8E":
                    mySubscription(chatId);
                    break;

                case "–≤—Å–µ —Ñ–∞–π–ª—ã":
                case "–í—Å–µ —Ñ–∞–π–ª—ã":
                case "/all_files":
                    sendAllAudioFiles(chatId);
                    break;//dance


                case "/get_lesson":
                case "get lesson":
                case "–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫":
                case "–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫":
                    sendLessonByDB(chatId);
                    break;

                case "–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
                case "/change_status":
                    changeSubscription(chatId);
                    break;
            }

        } else if (update.hasCallbackQuery()) {
            buttonImplementation(update, update.getMessage());
        }
    }

    private boolean userState(Message message) {
        boolean userInRepository = true;
        if(userDataRepository.findById(message.getChatId()).isEmpty()){
            userInRepository = false;
            registerUser(message);
        }
        return userInRepository;
    }
    private void registerUser(Message message) {
        if(userDataRepository.findById(message.getChatId()).isEmpty()){

            var chatId = message.getChatId();
            var chat = message.getChat();

            UserData user = new UserData();

            user.setChatId(chatId);
            user.setUserName(chat.getUserName());

            userDataRepository.save(user);
            log.info("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–•–†–ê–ù–ï–ù: " + user);
        }
    }

    //  –º–µ—Ç–æ–¥ –¥–∞–µ—Ç —Ç—Ä—É —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
    protected void accessGranted(long chatId) {
        UserData user = userDataRepository.findById(chatId).orElseThrow();

        if (user.isAccessGranted()){//–µ—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –∏–º–µ–µ–Ω—Ç –ø–æ–¥–∏—Å–∫—É
            alreadyHavingSubscriptionWindow(chatId, "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ " + validity(chatId) +
                    "\n\n–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏\uD83D\uDC47");
            return;
        }
        //–æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω —Ñ–æ–ª–∑
        user.setAccessGranted(true);
        user.setActivationDate(new Timestamp(System.currentTimeMillis()));

        //–µ—Å–ª–∏ —é–∑–µ—Ä –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        if(user.getNumberLesson()==null){
            user.setNumberLesson(1);
            userDataRepository.save(user);
            System.out.println("\n(–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª)\n");
            firstSubscriptionWindow(chatId, congrats);

        } else {
            //–µ—Å–ª–∏ —é–∑–µ—Ä –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤–Ω–æ–≤—å
            userDataRepository.save(user);
            System.out.println("\n(–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª)\n");
            sendLessonWindow(chatId, comeback);
        }

    }
    //–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ –≤–Ω–∏–∑—É
    private void sendsMessage(long chatId, String answer) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(answer);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();

        row.add("\uD83C\uDF81–º–µ–Ω—é\uD83C\uDF81");

        keyboardRows.add(row);

        row = new KeyboardRow(); //–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫

        row.add("\uD83D\uDC8E–º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\uD83D\uDC8E");
        row.add("\uD83D\uDCDA–º–æ–∏ —É—Ä–æ–∫–∏\uD83D\uDCDA");

        keyboardRows.add(row);

        keyboardMarkup.setKeyboard(keyboardRows);

        message.setReplyMarkup(keyboardMarkup);

        executeMessage(message);
    }
    private void executeMessage(SendMessage sendMessage) {
        telegramBot.sendAnswerMessage(sendMessage);
    }

    void prepareAndSendMessage(long chatId, String textToSend){
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);
        executeMessage(message);
    }
    //  –æ–∫–Ω–æ –º–µ–Ω—é—à–∫–∏ –≤ —á–∞—Ç–µ
    private void greetings(long chatId , String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–ß—Ç–æ –¥–∞—ë—Ç —ç—Ç–æ—Ç –±–æ—Ç\uD83D\uDE4C");
        firstButton.setCallbackData("–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);

        rowInLine = new ArrayList<>();

        InlineKeyboardButton thirdButton = new InlineKeyboardButton();
        thirdButton.setText("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞\uD83D\uDCDA");
        thirdButton.setCallbackData("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ");

        rowInLine.add(thirdButton);
        rowsInLine.add(rowInLine);

            rowInLine = new ArrayList<>();

        InlineKeyboardButton secondButton = new InlineKeyboardButton();
        secondButton.setText("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\uD83E\uDE99");
        secondButton.setCallbackData("–ø–æ–¥–ø–∏—Å–∫–∞");


        rowInLine.add(secondButton);
        rowsInLine.add(rowInLine);

            rowInLine = new ArrayList<>();

        InlineKeyboardButton fourthButton = new InlineKeyboardButton();
        fourthButton.setText("–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ ‚Ü©");
        fourthButton.setCallbackData("—Å–∫—Ä—ã—Ç—å");

        rowInLine.add(fourthButton);
        rowsInLine.add(rowInLine);

        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }
    //–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
    private void responseWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("‚Ü©–Ω–∞–∑–∞–¥");
        firstButton.setCallbackData("–Ω–∞–∑–∞–¥");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }

    private void testPayment(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–æ–ø–ª–∞—Ç–∏—Ç—å (—Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞)");
        firstButton.setCallbackData("—Ç–µ—Å—Ç –æ–ø–ª–∞—Ç–∞");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }
    //–∫–ª–∞–≤–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥
    private void subscriptionWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ");
        firstButton.setCallbackData("–æ–ø–ª–∞—Ç–∞");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);

        rowInLine = new ArrayList<>();

        InlineKeyboardButton secondButton = new InlineKeyboardButton();
        secondButton.setText("‚Ü©–Ω–∞–∑–∞–¥");
        secondButton.setCallbackData("–Ω–∞–∑–∞–¥");

        rowInLine.add(secondButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }
    // –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–µ–Ω–∏–∫—É
    private void alreadyHavingSubscriptionWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–û—Ç–∫—Ä—ã—Ç—å\uD83D\uDCDA");
        firstButton.setCallbackData("–æ—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –ª–µ–∫—Ü–∏–∏");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);

        rowInLine = new ArrayList<>();

        InlineKeyboardButton secondButton = new InlineKeyboardButton();
        secondButton.setText("‚Ü©–Ω–∞–∑–∞–¥");
        secondButton.setCallbackData("–Ω–∞–∑–∞–¥");

        rowInLine.add(secondButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }
    private void sendLessonWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–ü–æ–ª—É—á–∏—Ç—å");
        firstButton.setCallbackData("–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }

    private void lastLessonWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–ü–æ–ª—É—á–∏—Ç—å");
        firstButton.setCallbackData("–ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }

    private void firstSubscriptionWindow(long chatId, String text) {

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        InlineKeyboardMarkup markupInLine = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInLine = new ArrayList<>();
        List<InlineKeyboardButton> rowInLine = new ArrayList<>();

        InlineKeyboardButton firstButton = new InlineKeyboardButton();
        firstButton.setText("–æ—Ç–∫—Ä—ã—Ç—å \uD83D\uDC47");
        firstButton.setCallbackData("–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫");

        rowInLine.add(firstButton);
        rowsInLine.add(rowInLine);


        markupInLine.setKeyboard(rowsInLine);
        message.setReplyMarkup(markupInLine);
        executeMessage(message);
    }

    private void buttonImplementation(Update update, Message message) {
        String callbackData = update.getCallbackQuery().getData();
        long messageId = update.getCallbackQuery().getMessage().getMessageId();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        String pen = "\uD83D\uDCCC";

        if (callbackData.equals("–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")) {

            String text = HELP_TEXT;
            responseWindow(chatId, text);
            executeEditMessageTest(pen, chatId, messageId);


        } else if (callbackData.equals("—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")) {

            String text = "1.–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–º –∫—É—Ä—Å, —á—Ç–æ –Ω–∞—Å –∂–¥–µ—Ç \n\n2.—á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–º " +
                    " \n\n3.–ø–æ—á–µ–º—É –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏ –∫–æ–º—É –æ–Ω –ø–æ–¥–æ–π–¥–µ—Ç ";
            responseWindow(chatId, text);
            executeEditMessageTest(pen, chatId, messageId);

        } else if (callbackData.equals("–ø–æ–¥–ø–∏—Å–∫–∞")) {
            //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
            UserData user = userDataRepository.findById(chatId).orElseThrow();
            if (user.isAccessGranted()){
                accessGranted(chatId);//–ø—Ä–æ–∂–∞—Ç—å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –æ–∫–Ω–µ
                executeEditMessageTest(pen, chatId, messageId);
                return;
            }

            String text = "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –º–µ—Å—è—Ü –∏ —Å—Ç–æ–∏—Ç 100 –±–∞–∫—Å–æ–≤. " +
                    "\n\n–ó–¥–µ—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ";
            subscriptionWindow(chatId, text);
            executeEditMessageTest(pen, chatId, messageId);

        } else if (callbackData.equals("—Å–∫—Ä—ã—Ç—å")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
        } else if (callbackData.equals("–Ω–∞–∑–∞–¥")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
            greetings(chatId, "–ü—Ä–æ—à—É, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞\uD83D\uDE0A");

        } else if (callbackData.equals("–æ–ø–ª–∞—Ç–∞")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
            purchase(chatId);//–∫–Ω–æ–ø–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            testPayment(chatId, "—ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –µ–µ –Ω–µ –±—É–¥–µ—Ç");

        } else if (callbackData.equals("—Ç–µ—Å—Ç –æ–ø–ª–∞—Ç–∞")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);

            accessGranted(chatId);//—Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞

        } else if (callbackData.equals("–æ—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –ª–µ–∫—Ü–∏–∏")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
            sendAccessLessons(chatId);

        } else if (callbackData.equals("–ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
            sendLessonByDB(chatId);

        } else if (callbackData.equals("–ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫")) {

            executeEditMessageTest("‚Ü©", chatId, messageId);
            lastLesson(chatId);
        }

    }
    //—ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å—Ä–∞–∑—É –∂–µ —É–¥–∞–ª—è–µ—Ç —Å–≤–æ–π —Ç–µ–∫—Å—Ç
    private void executeEditMessageTest(String text, long chatId, long messageId) {
        EditMessageText message = new EditMessageText();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);

        telegramBot.executeMessageText(message);

        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatId));
        deleteMessage.setMessageId((int) messageId);

        telegramBot.deleteMessage(deleteMessage);
    }

    //–º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –∏–∑ –ø–∞–ø–∫–∏ –≤ –ë–∞–∑—É
    private void setFileIntoDB(long chatId){
        String directoryPath = "C:\\Users\\hokage\\Downloads\\Telegram Desktop\\lessons_mp3";
        File directory = new File(directoryPath);
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isFile()) {
                String fileName = file.getName();
                String filePath = file.getAbsolutePath();
                UserLessons userLessons = userLessonsRepository.findByFilePath(filePath);
                if (userLessons == null) {
                    audioService.saveAudio(fileName, filePath);
                    System.out.println("–§–∞–π–ª " + fileName + " –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
                    prepareAndSendMessage(chatId, "–§–∞–π–ª " + fileName + " –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
                } else {
                    System.out.println("–§–∞–π–ª " + fileName + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                    prepareAndSendMessage(chatId, "–§–∞–π–ª " + fileName + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                }
            }
        }
    }

    //–º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∂–∞—é—â–∏–π –≤—Å–µ –∞—É–¥–∏–æ –∏–∑ –ø–∞–ø–∫–∏
    private void sendAllAudioFiles(long chatId) {
        File folder = new File(folderPath);
        File[] files = folder.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isFile() && file.getName().endsWith(".mp3")) {
                    InputFile inputFile = new InputFile(file);
                    SendAudio sendAudio = new SendAudio(String.valueOf(chatId), inputFile);
                    sendAudio.setTitle(file.getName());
                    telegramBot.executeAudio(sendAudio);
                }
            }
            prepareAndSendMessage(chatId, "–í—Å–µ —Ñ–∞–π–ª—ã –≤—ã—Å–ª–∞–Ω–Ω—ã, –∫—Ä–∞—Å–∞–≤—á–∏–∫\uD83D\uDE0E");
            System.out.println("–í—Å–µ —Ñ–∞–π–ª—ã –≤—ã—Å–ª–∞–Ω–Ω—ã, –∫—Ä–∞—Å–∞–≤—á–∏–∫");
        } else {
            System.out.println("–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
    }
    //–º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —É—Ä–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    private void sendLessonAudio(long chatId, int lessonNumber) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –∞—É–¥–∏–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞
        String fileName = String.format("lesson%01d.mp3", lessonNumber);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InputFile –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ
        InputFile inputFile = new InputFile(new File(folderPath, fileName));

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç SendAudio —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞—É–¥–∏–æ
        SendAudio sendAudio = new SendAudio(String.valueOf(chatId), inputFile);
        sendAudio.setPerformer("performer");
        sendAudio.setTitle(fileName);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ-—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º
        telegramBot.executeAudio(sendAudio);
    }

//–º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —É—Ä–æ–∫–∏ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç –ë–î

    void sendLessonByDB(long chatId){
        Optional<UserData> userDataOptional = userDataRepository.findById(chatId);

        if(userDataOptional.isPresent()) {
            UserData userData = userDataOptional.get();
            Integer lessonNumber = userData.getNumberLesson();

            if(lessonNumber == null){
                return;
            }

            if(allForToday(chatId)){
                System.out.println("–Ω–∞ —Å–µ–≥–æ–¥–Ω—è " + userData.getUserName() + " –ø–æ–ª—É—á–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏");
                return;
            }


            String fileName = String.format("lesson%01d.mp3", lessonNumber);
            File file = new File(folderPath, fileName);

            if (!file.exists()) {
                System.out.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + fileName);
                prepareAndSendMessage(chatId, "–Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤");
                return;
            }

            sendLessonAudio(chatId, lessonNumber);
            userData.setDispatchTime(new Timestamp(System.currentTimeMillis()));
            userData.setNumberLesson(lessonNumber + 1);
            userDataRepository.save(userData);
        } else {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId " + chatId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
    }
    //–º–µ—Ç–æ–¥ –≤—ã—Å—ã–ª–∞—é—â–∏–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏
    private void sendAccessLessons(long chatId) {
        Optional<UserData> userDataOptional = userDataRepository.findById(chatId);

        if(userDataOptional.isPresent()) {
            UserData userData = userDataOptional.get();
            Integer currentLessonNumber = userData.getNumberLesson();

            UserData user = userDataRepository.findById(chatId).orElseThrow();
            if (currentLessonNumber == null){
                prepareAndSendMessage(chatId, "–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞\uD83E\uDD17");
                return;
            }
            if (!user.isAccessGranted()){
                prepareAndSendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É\uD83E\uDD7A");
                return;
            }

            for (int i = 1; i < currentLessonNumber; i++) {
                String fileName = String.format("lesson%01d.mp3", i);
                File file = new File(folderPath, fileName);

                if (!file.exists()) {
                    System.out.println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + fileName);
                    continue;
                }

                sendLessonAudio(chatId, i);
            }
        } else {
            System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId " + chatId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
            prepareAndSendMessage(chatId, "–≤–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\uD83E\uDEE5");
        }
    }

    private void lastLesson(long chatId){
        UserData userData = userDataRepository.findById(chatId).orElseThrow();
        Integer currentLessonNumber = userData.getNumberLesson();
        if (currentLessonNumber == null){
            prepareAndSendMessage(chatId, "–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–∫–∞\uD83E\uDD17");
            return;
        }
        if (!userData.isAccessGranted()){
            prepareAndSendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É\uD83E\uDD7A");
            return;
        }
        sendLessonAudio(chatId, currentLessonNumber - 1);
    }



    // @Scheduled(cron = "0 */5 * * * ?")//–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    @Scheduled(cron = "0 0 5 * * ?") // –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 5:00 —É—Ç—Ä–∞
    public void sendFileEverydayAtFiveAM2() {
        List<UserData> userDataList = userDataRepository.findAll();
        for (UserData userData : userDataList) {

            Integer lessonNumber = userData.getNumberLesson();
            if(lessonNumber == null && userData.isAccessGranted()){
                userData.setNumberLesson(1);
                userDataRepository.save(userData);
            }

            if(userData.isAccessGranted()) {

                if(allForToday(userData.getChatId())){
                    System.out.println("–Ω–∞ —Å–µ–≥–æ–¥–Ω—è " + userData.getUserName() + " –ø–æ–ª—É—á–∏–ª –≤—Å–µ —É—Ä–æ–∫–∏");
                    continue;
                }
                userData.setNumberLesson(lessonNumber + 1);
                userData.setDispatchTime(new Timestamp(System.currentTimeMillis()));
                userDataRepository.save(userData);

                lastLessonWindow(userData.getChatId(), "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–∫!\n" +
                        "–û—Ç–∫—Ä—ã—Ç—å?");
                System.out.println("—É—Ä–æ–∫ –≤—ã—Å–ª–∞–Ω —é–∑–µ—Ä—É " + userData.getUserName());

            } else {
                System.out.println("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ "+ userData.getChatId() +"  "+ userData.getUserName() +" –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏");
                continue;
            }

            System.out.println("–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –º–µ—Ç–æ–¥ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");

            if (expired(userData.getChatId())){
                System.out.println("–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —É " + userData.getUserName() +" —Å –∞–π–¥–∏: "+ userData.getChatId());
                break;
            }
        }
    }


    //–º–µ—Ç–æ–¥ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "–º–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
    //—ç—Ç–æ –æ–∫–Ω–æ –≤—ã–ª–∞–∑–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ (–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    private void mySubscription(long chatId){
        UserData user = userDataRepository.findById(chatId).orElseThrow();

        if(!user.isAccessGranted()){

            greetings(chatId, "–£ –≤–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\uD83E\uDD7A" +
                    "\n\n–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –æ–ø–ª–∞—Ç—ã\uD83D\uDE0C");
        } else {
            if(!expired(chatId))
            accessGranted(chatId);//–Ω–∏–∂–Ω—è—è –∫–Ω–æ–ø–∫–∞ "–º–æ—è –ø–æ–¥–∏—Å–∫–∞"
        }
    }

    private void changeSubscription(long chatId){
        UserData user = userDataRepository.findById(chatId).orElseThrow();

        if(!user.isAccessGranted()){
            user.setAccessGranted(true);
            userDataRepository.save(user);
            prepareAndSendMessage(chatId, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω–∞\uD83D\uDE01");
        } else {
            prepareAndSendMessage(chatId, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\uD83D\uDE06");
            user.setAccessGranted(false);
            userDataRepository.save(user);
        }
    }

    private void purchase(long chatId){
        SendInvoice sendInvoice = new SendInvoice();
        sendInvoice.setChatId(String.valueOf(chatId));
        sendInvoice.setTitle("—É—Ä–æ–∫–∏ –ö—É–ª–µ—à–æ–≤–∞");
        sendInvoice.setDescription("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏");
        sendInvoice.setPayload("lessons");
        sendInvoice.setProviderToken("632593626:TEST:sandbox_i92420978458");
        sendInvoice.setCurrency("USD");
        sendInvoice.setPrices(new ArrayList<>(Collections.singletonList(
                new LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ Coach Bot ", 50) // —Ü–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        )));
        telegramBot.executePurchase2(sendInvoice, chatId);
    }

    private boolean expired(long chatId){
        UserData userData = userDataRepository.findById(chatId).orElseThrow();
        Timestamp activationDate = userData.getActivationDate();
        LocalDate currentDate = LocalDate.now();
        LocalDate activationLocalDate = activationDate.toLocalDateTime().toLocalDate();
        long daysBetween = ChronoUnit.DAYS.between(activationLocalDate, currentDate);

        if (daysBetween > 30) {
            userData.setAccessGranted(false);
            userDataRepository.save(userData);
            greetings(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É.\uD83E\uDD7A" +
                    "\n\n–ù–æ –≤ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –º–æ–º–µ–Ω—Ç –í—ã –º–æ–∂–µ—Ç–µ –µ–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–Ω–æ–≤—å\uD83D\uDE0A");
            return true;
        }
        return false;
    }

    private boolean allForToday(long chatId){
        UserData userData = userDataRepository.findById(chatId).orElseThrow();
        if(userData.getNumberLesson()== 1) {
            return false;
        }
        if(userData.getDispatchTime() == null) {
            userData.setDispatchTime(new Timestamp(System.currentTimeMillis()));
            userDataRepository.save(userData);
            return false;
        }
        Timestamp dispatchDate = userData.getDispatchTime();
        LocalDate currentDate = LocalDate.now();
        LocalDate dispatchLocalDate = dispatchDate.toLocalDateTime().toLocalDate();
        long daysBetween = ChronoUnit.DAYS.between(dispatchLocalDate, currentDate);

        if (daysBetween < 1) {
            return true;
        }
        return false;
    }

    private String validity(long chatId) {
        UserData userData = userDataRepository.findById(chatId).orElseThrow();
        Timestamp activationDate = userData.getActivationDate();
        LocalDate currentDate = LocalDate.now();
        LocalDate activationLocalDate = activationDate.toLocalDateTime().toLocalDate();
        long daysBetween = ChronoUnit.DAYS.between(activationLocalDate, currentDate);
        String result = " –µ—â–µ "+ (30 - daysBetween) + " –¥–Ω–µ–π\uD83D\uDE0C";
        return result;
    }
}